---
# This playbook updates and upgrades an OPNsense firewall using the API.

- name: Update and upgrade OPNsense firewall using API key from file
  hosts: opnsense  # Target group of OPNsense firewalls
  become: true  # Run tasks with elevated privileges

  vars:
    opnsense_api_credentials_file: /home/manu/.secret/opnsense_landstr.key  # Path to the file containing API credentials

  tasks:
    # Read API credentials from the INI file
    - name: Read API credentials from file
      ansible.builtin.ini_file:
        path: "{{ opnsense_api_credentials_file }}"
        section: ""  # Credentials are in the default section
      register: opnsense_api_credentials  # Store the extracted credentials

    # Update the package repository list
    - name: Run pkg update
      ansibleguy.opnsense.opnsense_command:
        api_key: "{{ opnsense_api_credentials.key }}"  # Use API key for authentication
        api_secret: "{{ opnsense_api_credentials.secret }}"  # Use API secret for authentication
        command: pkg update -f  # Force update of the repository list
      register: pkg_update_result  # Store the result of the command

    # Check for available package upgrades (dry-run)
    - name: Check for updates
      ansibleguy.opnsense.opnsense_command:
        api_key: "{{ opnsense_api_credentials.key }}"
        api_secret: "{{ opnsense_api_credentials.secret }}"
        command: pkg upgrade -n  # Simulate upgrade to see available updates
      register: pkg_upgrade_check_result  # Store the result of the command

    # Display the list of available updates
    - name: Display available updates
      debug:
        msg: "{{ pkg_upgrade_check_result.stdout }}"  # Print the output of the upgrade check

    # Upgrade packages if updates are available
    - name: Upgrade packages
      ansibleguy.opnsense.opnsense_command:
        api_key: "{{ opnsense_api_credentials.key }}"
        api_secret: "{{ opnsense_api_credentials.secret }}"
        command: pkg upgrade -y  # Upgrade packages automatically
      when: pkg_upgrade_check_result.stdout != ""  # Only run if there are updates

    # Reboot the firewall to apply updates
    - name: Reboot OPNsense firewall
      ansibleguy.opnsense.opnsense_command:
        api_key: "{{ opnsense_api_credentials.key }}"
        api_secret: "{{ opnsense_api_credentials.secret }}"
        command: reboot  # Reboot the firewall
      when: pkg_upgrade_check_result.stdout != ""  # Only run if there are updates